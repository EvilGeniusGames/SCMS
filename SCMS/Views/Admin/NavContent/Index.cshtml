@model SCMS.Models.NavContentViewModel

@{
    ViewData["Title"] = "NavContent Manager";
}

<div class="container-fluid py-4">
    <!-- Menu Group Selector Row -->
    <div class="card p-3 mb-3">
        <label class="form-label mb-2">Menu Group:</label>
        <div class="d-flex align-items-center">
            <select class="form-select w-auto me-2" id="menuGroupDropdown">
                <option value="Main">Main</option>
                @foreach (var group in Model.Groups.Where(g => g.GroupName != "Main"))
                {
                    <option value="@group.GroupName">@group.GroupName</option>
                }
            </select>

            <button class="btn btn-success me-1" id="addGroupBtn" title="Add Group">➕ Add</button>
            <button class="btn btn-warning me-1" id="renameGroupBtn" title="Rename Group">✏️ Edit</button>
            <button class="btn btn-danger" id="deleteGroupBtn" title="Delete Group">🗑 Delete</button>
        </div>
    </div>

    <!-- Main Toolbar -->
    <div class="mb-3">
        <button class="btn btn-primary me-2" id="addItemBtn">➕ Add Item</button>
        <button class="btn btn-secondary me-2" id="addSubmenuBtn" disabled>➕ Add Submenu</button>
        <button class="btn btn-danger me-2" id="deleteItemBtn">🗑 Delete</button>
        <button class="btn btn-outline-secondary me-2" id="moveUpBtn">☰ Move Up</button>
        <button class="btn btn-outline-secondary me-2" id="moveDownBtn">☰ Move Down</button>
        <button class="btn btn-success" id="saveMenuBtn">💾 Save Menu</button>
    </div>

    <div class="row">
        <!-- Menu Item Tree/List View -->
        <div class="col-md-4">
            <div class="card h-100" style="min-height: 300px;">
                <div class="card-body">
                    <ul class="list-group" id="menuTreeView">
                        @{
                            var mainGroup = Model.Groups.FirstOrDefault(g => g.GroupName == "Main");
                            if (mainGroup != null)
                            {
                                await Html.RenderPartialAsync("_MenuTreePartial", mainGroup.Items);
                            }
                            else
                            {
                                <li class="list-group-item text-muted">No items found for Main group.</li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>

        <!-- Right Pane Editor -->
        <div class="col-md-8">
            <div class="card h-100" style="min-height: 300px;" id="menuItemEditor">
                <div class="card-body text-muted">
                    Select a menu item to begin editing.
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const editorPane = document.getElementById("menuItemEditor");

        document.querySelectorAll("#menuTreeView li").forEach(li => {
            li.addEventListener("click", function (e) {
                e.preventDefault();

                const itemId = this.getAttribute("data-id");
                const itemText = this.innerText.trim();

                editorPane.innerHTML = `
                    <div class="card-body">
                        <h5 class="mb-3">Editing: ${itemText}</h5>
                        <form id="menuEditorForm">
                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <input type="text" class="form-control" name="title" value="${itemText}" />
                            </div>

                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" name="isExternal" id="isExternalCheck" />
                                <label class="form-check-label" for="isExternalCheck">External Link</label>
                            </div>

                            <div id="urlGroup" class="mb-3 d-none">
                                <label class="form-label">URL</label>
                                <input type="text" class="form-control" name="url" placeholder="/your-page" />
                            </div>

                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" name="isVisible" id="isVisibleCheck" checked />
                                <label class="form-check-label" for="isVisibleCheck">Visible</label>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Security Level</label>
                                <select class="form-select" name="securityLevelId" id="securityLevelSelect">
                                    <option value="3">Anonymous</option>
                                    <option value="2">User</option>
                                    <option value="1">Administrator</option>
                                </select>
                            </div>

                            <div id="pageEditorGroup" class="mb-3 d-none">
                                <label class="form-label">Page Content</label>
                                <div id="quillEditor" style="height: 300px;"></div>
                            </div>

                            <button type="submit" class="btn btn-primary">Save</button>
                        </form>
                    </div>
                `;

                const isExternalCheck = document.getElementById("isExternalCheck");
                const urlGroup = document.getElementById("urlGroup");
                const pageEditorGroup = document.getElementById("pageEditorGroup");

                    let quillInstance = null;
                    let quillInitialized = false;

                    isExternalCheck.addEventListener("change", function () {
                        const external = this.checked;

                        urlGroup.classList.toggle("d-none", !external);
                        pageEditorGroup.classList.toggle("d-none", external);

                        setTimeout(() => {
                            if (!external && !quillInitialized) {
                                quillInstance = new Quill("#quillEditor", {
                                    theme: "snow"
                                });
                                quillInitialized = true;
                            }
                        }, 10);
                    });

                // Trigger initial state
                isExternalCheck.dispatchEvent(new Event("change"));
            });
        });
    });
</script>
